@page "/cart"
@inject ICartService _cartService
@inject IOrderService _orderService


<PageTitle>Shopping Cart</PageTitle>
@if (cartProducts == null || cartProducts.Count == 0)
{
    <span>@message</span>
}
else
{
    if (orderPlaced == false)
    {
        @foreach (var product in cartProducts)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="image" />
                </div>
                <div class="name">
                    <h5><a href="/product/@product.ProductId">@product.Title</a></h5>
                    <span>@product.ProductType</span><br />
                    <input type="number" value="@product.Quantity"
               @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product))"
               class="form-control input-quantity"
               min="1" />
                    <button class="btn-delete" @onclick="@(() =>
                        RemoveProductFromCart(product.ProductId, product.ProductTypeId))">
                        Delete
                    </button>
                </div>
                <div class="cart-product-price">$@(product.Price * product.Quantity)</div>
            </div>
        }
        <div class="cart-product-price">
            Total (@cartProducts.Count): $@cartProducts.Sum(product => @product.Price * product.Quantity)
        </div>
        <button @onclick="PlaceOrder" class="btn alert-success float-right mt-1">Place Order</button>
    }
    else
    {
        <span>Thank you for order! you can check your orders <a href="orders">here</a></span>
    }

}

@code {
    List<CartProductResponse> cartProducts = null;
    public string message = "Loading cart...";
    bool orderPlaced = false;
    protected override async Task OnInitializedAsync()
    {
        orderPlaced = false;
        await LoadCart();
    }

    private async Task RemoveProductFromCart(int productId, int productTypeId)
    {
        await _cartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        await _cartService.CartItemQuantity();
        cartProducts = await _cartService.GetCartProduct();

        if (cartProducts == null || cartProducts.Count == 0)
        {
            message = "Your cart is empty";
        }
    }
    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponse product)
    {
        product.Quantity = int.Parse(e.Value.ToString());
        if (product.Quantity < 1)
            product.Quantity = 1;
        await _cartService.UpdateQuantity(product);
    }

    private async Task PlaceOrder()
    {
        await _orderService.PlaceOrder();
        await _cartService.CartItemQuantity();
        orderPlaced = true;
    }

}
